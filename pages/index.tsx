import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Card from '../components/Card/card';
import {useEffect, useState} from "react";
import { ShoppingCartOutlined  } from '@ant-design/icons';
import { Select, Badge, Button } from 'antd';
import {Modal} from "../components/Modal/modal";
import {Cart} from '../components/Cart/cart';
import { useSelector, useDispatch } from 'react-redux';
import { getCart, addItem } from '../store/slices/cartSlice';
import {RootState} from "../store";

export interface Product{
    id: number,
    title: string,
    description: string,
    price: number,
    discountPercentage: number,
    rating: number,
    stock: number,
    brand: string,
    category: string,
    thumbnail: string,
    images: Array<string>
}
export interface CartItem{
    id: number,
    title: string,
    price: number,
    quantity: number
}

export default function Home() {
    const [allProducts, setAllProducts] = useState<Array<Product>>();
    const [products, setProducts] = useState<Array<Product>>();
    const [categories, setCategories] = useState<Array<string>>();
    const [openProduct, setOpenProduct] = useState<Product>();
    const [openCart, setOpenCart] = useState<boolean>(false);
    const cart = useSelector((state:RootState) => state.cart.items);
    const dispatch = useDispatch();
    useEffect(()=>{
        dispatch(getCart(localStorage.getItem("cart")));
        fetch('https://dummyjson.com/products?limit=100')
            .then(res => res.json())
            .then(r => {
                SortArray(r.products, "");
                setAllProducts(r.products);
            });
        fetch('https://dummyjson.com/products/categories')
            .then(res => res.json())
            .then(setCategories);
    }, []);
    const handleChangeSort = (value: string) => {
        if(products){
            SortArray(products, value);
        }
    };
    const handleChangeFilter = (value: string) => {
        if(allProducts){
            setProducts(allProducts.slice(0).filter(product => product.category === value));
        }
    };
    const SortArray = (arr:Array<Product>, arg:string)=>{
        let SortArrayFunc = (x:Product, y:Product) => {
            switch (arg){
                case "priceAsc":
                    return x.price - y.price;
                case "priceDesc":
                    return -(x.price - y.price);
                case "rating":
                    return -(x.rating - y.rating);
                default:
                    return x.title.localeCompare(y.title, 'en', {ignorePunctuation: true});
            }
        };
        setProducts(arr.slice(0).sort(SortArrayFunc));
    }
    const addCartItem = (newItem: Product)=>{
        dispatch(addItem(newItem));
        setOpenProduct(undefined);
        setOpenCart(true);
    }
  return (
    <div className={styles.container}>
      <Head>
        <title>SHOP BY NEXT</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <header className={styles.header}>
            <Image src="/logo.svg" alt="Логотип" width={191} height={148}/>
        </header>
      <main className={styles.main}>
          <div className={styles.filters}>
              <Select
                  defaultValue="все"
                  style={{ width: 200, marginRight: 20 }}
                  onChange={handleChangeFilter}
                  options={categories && categories.map((item) => ({
                      value: item,
                      label: item,
                  }))}
              />
              <Select
                  defaultValue="name"
                  style={{ width: 200, marginRight: 20  }}
                  onChange={handleChangeSort}
                  options={[
                      {
                          value: 'name',
                          label: 'по алфавиту',
                      },
                      {
                          value: 'priceAsc',
                          label: 'по возрастанию цены',
                      },
                      {
                          value: 'priceDesc',
                          label: 'по убыванию цены',
                      },
                      {
                          value: 'rating',
                          label: 'с лучшими оценками',
                      },
                  ]}
              />
              <Badge count={cart && cart.length} >
                  <Button size={"large"} onClick={()=>{setOpenCart(true)}} icon={<ShoppingCartOutlined />} />
              </Badge>
          </div>
        <div className={styles.grid}>
            {products?.map((product)=>{
                return <Card key={product.id} product={product} setOpenProduct={setOpenProduct}/>
            })}
        </div>

      </main>
        {openProduct && <Modal product={openProduct} setOpenProduct={setOpenProduct} addCartItem={addCartItem}/>}
        {openCart && <Cart setOpenCart={setOpenCart} />}
    </div>
  )
}
